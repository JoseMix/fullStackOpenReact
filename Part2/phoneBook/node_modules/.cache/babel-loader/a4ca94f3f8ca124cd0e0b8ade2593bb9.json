{"ast":null,"code":"var _jsxFileName = \"/home/josemix/Escritorio/FullStackOpen/Part2/phoneBook/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Filter from \"./components/Filter\";\nimport Form from \"./components/Form.js\";\nimport Person from \"./components/Person\"; //import axios from \"axios\";\n\nimport phoneService from \"./services/phoneService\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [searchName, setSearchName] = useState(\"\");\n  const [filteredPersons, setFilteredPersons] = useState(...persons); //every change on search, executes a map that search for letters that are included un the name, if you empty the searchbar all elements are show\n\n  const nameSearchHandler = event => {\n    setSearchName(event.target.value);\n    const search = persons.filter(person => person.name.toLowerCase().includes(event.target.value.toLowerCase()));\n    setFilteredPersons(search);\n  };\n\n  const nameHandler = event => {\n    setNewName(event.target.value);\n  };\n\n  const numHandler = event => {\n    setNewNumber(event.target.value);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    const newObject = {\n      name: newName,\n      number: newNumber\n    }; ///filter->empty or filled array\n    ///find->undefined or the object\n    //So with filter we have to check the size of the array, with find we can check if is false (false===undefined)\n\n    if (persons.find(person => person.name === newName)) {\n      // if (persons.filter((person) => person.name === newName).length === 0) {\n      //   setPersons(persons.concat(newObject));\n      // }\n      alert(`${newName} is already added to the phonebook.`);\n    } else {\n      phoneService.create().then(newObject => setPersons(persons.concat(newObject)));\n      setPersons(persons.concat(newObject));\n    }\n\n    setNewName(\"\");\n    setNewNumber(\"\");\n  };\n\n  useEffect(() => {\n    phoneService.getAll().then(initialList => setPersons(initialList));\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, \"Phonebook\"), /*#__PURE__*/React.createElement(Filter, {\n    nameSearchHandler: nameSearchHandler,\n    searchValue: searchName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, \"Add New \"), /*#__PURE__*/React.createElement(Form, {\n    submitHandler: submitHandler,\n    nameHandler: nameHandler,\n    numHandler: numHandler,\n    newName: newName,\n    newNumber: newNumber,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, \"Numbers\"), /*#__PURE__*/React.createElement(Person, {\n    searchName: searchName,\n    persons: persons,\n    filteredPersons: filteredPersons,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/josemix/Escritorio/FullStackOpen/Part2/phoneBook/src/App.js"],"names":["React","useState","useEffect","Filter","Form","Person","phoneService","App","persons","setPersons","newName","setNewName","newNumber","setNewNumber","searchName","setSearchName","filteredPersons","setFilteredPersons","nameSearchHandler","event","target","value","search","filter","person","name","toLowerCase","includes","nameHandler","numHandler","submitHandler","preventDefault","newObject","number","find","alert","create","then","concat","getAll","initialList"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Filter from \"./components/Filter\";\nimport Form from \"./components/Form.js\";\nimport Person from \"./components/Person\";\n//import axios from \"axios\";\nimport phoneService from \"./services/phoneService\";\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [searchName, setSearchName] = useState(\"\");\n  const [filteredPersons, setFilteredPersons] = useState(...persons);\n  //every change on search, executes a map that search for letters that are included un the name, if you empty the searchbar all elements are show\n  const nameSearchHandler = (event) => {\n    setSearchName(event.target.value);\n    const search = persons.filter((person) =>\n      person.name.toLowerCase().includes(event.target.value.toLowerCase())\n    );\n    setFilteredPersons(search);\n  };\n  const nameHandler = (event) => {\n    setNewName(event.target.value);\n  };\n  const numHandler = (event) => {\n    setNewNumber(event.target.value);\n  };\n  const submitHandler = (event) => {\n    event.preventDefault();\n    const newObject = {\n      name: newName,\n      number: newNumber,\n    };\n    ///filter->empty or filled array\n    ///find->undefined or the object\n    //So with filter we have to check the size of the array, with find we can check if is false (false===undefined)\n    if (persons.find((person) => person.name === newName)) {\n      // if (persons.filter((person) => person.name === newName).length === 0) {\n      //   setPersons(persons.concat(newObject));\n      // }\n      alert(`${newName} is already added to the phonebook.`);\n    } else {\n      phoneService\n        .create()\n        .then((newObject) => setPersons(persons.concat(newObject)));\n      setPersons(persons.concat(newObject));\n    }\n    setNewName(\"\");\n    setNewNumber(\"\");\n  };\n  useEffect(() => {\n    phoneService.getAll().then((initialList) => setPersons(initialList));\n  }, []);\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Filter\n        nameSearchHandler={nameSearchHandler}\n        searchValue={searchName}\n      ></Filter>\n\n      <h2>Add New </h2>\n      <Form\n        submitHandler={submitHandler}\n        nameHandler={nameHandler}\n        numHandler={numHandler}\n        newName={newName}\n        newNumber={newNumber}\n      ></Form>\n      <h2>Numbers</h2>\n      <Person\n        searchName={searchName}\n        persons={persons}\n        filteredPersons={filteredPersons}\n      ></Person>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}